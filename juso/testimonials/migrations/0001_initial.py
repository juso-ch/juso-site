# Generated by Django 3.1 on 2020-09-01 19:47

import django.core.validators
import django.db.models.deletion
import imagefield.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("sections", "0014_auto_20200712_1711"),
    ]

    operations = [
        migrations.CreateModel(
            name="Campaign",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="Used for Open Graph and other meta tags.",
                        max_length=200,
                        verbose_name="title",
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True,
                        help_text="Override the description for this page.",
                        verbose_name="description",
                    ),
                ),
                (
                    "meta_image",
                    imagefield.fields.ImageField(
                        blank=True,
                        height_field="meta_image_height",
                        help_text="Set the Open Graph image.",
                        upload_to="meta/%Y/%m",
                        verbose_name="image",
                        width_field="meta_image_width",
                    ),
                ),
                (
                    "meta_video_url",
                    models.URLField(
                        blank=True,
                        help_text="Set the Open Graph video to an url.",
                        verbose_name="video url",
                    ),
                ),
                (
                    "meta_video",
                    models.FileField(
                        blank=True,
                        help_text="Set the Open Graph video.",
                        upload_to="meta/video/%Y/%m",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["mp4"])
                        ],
                        verbose_name="video",
                    ),
                ),
                (
                    "meta_video_width",
                    models.IntegerField(default=1920,
                                        verbose_name="video width"),
                ),
                (
                    "meta_video_height",
                    models.IntegerField(default=1080,
                                        verbose_name="video height"),
                ),
                (
                    "meta_card_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("summary", "summary"),
                            ("summary large image", "summary_large_image"),
                            ("player", "player"),
                        ],
                        help_text="Card type",
                        max_length=50,
                        verbose_name="twitter card type",
                    ),
                ),
                (
                    "meta_twitter_site",
                    models.CharField(
                        blank=True,
                        help_text=
                        "The Twitter @username the card should be attributed to.",
                        max_length=30,
                        verbose_name="twitter site",
                    ),
                ),
                (
                    "meta_player_width",
                    models.IntegerField(default=1920,
                                        verbose_name="player width"),
                ),
                (
                    "meta_player_height",
                    models.IntegerField(default=1080,
                                        verbose_name="player height"),
                ),
                (
                    "meta_player",
                    models.CharField(
                        blank=True,
                        help_text="HTTPS URL to iFrame player.",
                        max_length=600,
                        verbose_name="player url",
                    ),
                ),
                (
                    "meta_canonical",
                    models.URLField(
                        blank=True,
                        help_text="If you need this you probably know.",
                        verbose_name="canonical URL",
                    ),
                ),
                (
                    "meta_author",
                    models.CharField(
                        blank=True,
                        help_text="Override the author meta tag.",
                        max_length=200,
                        verbose_name="author",
                    ),
                ),
                (
                    "meta_robots",
                    models.CharField(
                        blank=True,
                        help_text="Override the robots meta tag.",
                        max_length=200,
                        verbose_name="robots",
                    ),
                ),
                (
                    "meta_image_width",
                    models.PositiveIntegerField(blank=True,
                                                editable=False,
                                                null=True),
                ),
                (
                    "meta_image_height",
                    models.PositiveIntegerField(blank=True,
                                                editable=False,
                                                null=True),
                ),
                (
                    "meta_image_ppoi",
                    imagefield.fields.PPOIField(default="0.5x0.5",
                                                max_length=20),
                ),
                (
                    "language_code",
                    models.CharField(
                        choices=[("de", "German"), ("fr", "French"),
                                 ("it", "Italian")],
                        default="de",
                        max_length=10,
                        verbose_name="language",
                    ),
                ),
                ("name", models.CharField(max_length=100,
                                          verbose_name="Name")),
                (
                    "description",
                    models.CharField(max_length=240,
                                     verbose_name="Beschreibung"),
                ),
                (
                    "title_label",
                    models.CharField(max_length=180,
                                     verbose_name="label for title"),
                ),
                (
                    "email_validation",
                    models.BooleanField(
                        verbose_name="enable email validation"),
                ),
                ("is_active", models.BooleanField(verbose_name="ist aktiv")),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sections.section",
                    ),
                ),
            ],
            options={
                "verbose_name": "campaign",
                "verbose_name_plural": "campaigns",
            },
        ),
        migrations.CreateModel(
            name="Testimonial",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=180, verbose_name="Vorname"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=180, verbose_name="Nachname"),
                ),
                ("email",
                 models.EmailField(max_length=254, verbose_name="E-Mail")),
                ("title", models.CharField(max_length=180,
                                           verbose_name="Titel")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("statement", models.TextField(verbose_name="statement")),
                (
                    "image",
                    imagefield.fields.ImageField(
                        height_field="image_height",
                        upload_to="",
                        verbose_name="Bild",
                        width_field="image_width",
                    ),
                ),
                (
                    "validated",
                    models.BooleanField(default=False,
                                        verbose_name="validate"),
                ),
                ("public",
                 models.BooleanField(default=False, verbose_name="public")),
                (
                    "image_width",
                    models.PositiveIntegerField(blank=True,
                                                editable=False,
                                                null=True),
                ),
                (
                    "image_height",
                    models.PositiveIntegerField(blank=True,
                                                editable=False,
                                                null=True),
                ),
                (
                    "image_ppoi",
                    imagefield.fields.PPOIField(default="0.5x0.5",
                                                max_length=20),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="testimonials.campaign",
                    ),
                ),
            ],
            options={
                "verbose_name": "testimonial",
                "verbose_name_plural": "testimonials",
                "ordering": ["-created_at"],
            },
        ),
    ]
